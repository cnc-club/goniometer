#!/usr/bin/env python 
# -*- coding: utf-8 -*-
# Made by lar-technologies http://www.lar-tech.ru (c) 2016


import pygtk
pygtk.require("2.0")
import gtk, gobject
import time
import gladevcp.makepins
from gladevcp.gladebuilder import GladeBuilder
import hal
import linuxcnc
import hal_glib
import sys, os
import gladevcp
import os
import ConfigParser
import gladevcp.hal_mdihistory 
import subprocess
import signal
import re
from math import * 

d2r = 0.017453292519943295
r2d = 57.29577951308232
DEBUG = 100

glade_file = "gui/lar-goniometer.glade"
CFG = "gui/cfg/default.cfg"
to_rad = pi/180.
to_grad = 180./pi

class P5():
	def __init__(self, x=None, y=None, z=None, a=None, b=None) :
		if type(x) in [list, tuple] :
			x,y,z,a,b = tuple(x) 
		self.x = x
		self.y = y
		self.z = z
		self.a = a
		self.b = b

	def to_list(self) :	
		return [self.x,self.y,self.z,self.a,self.b]
		
	def to_gcode(self) :
		s = ""
		if self.x != None :
			s += " X%0.6f"%self.x
		if self.y != None :
			s += " Y%0.6f"%self.y
		if self.z != None :
			s += " Z%0.6f"%self.z
		if self.a != None :
			s += " A%0.6f"%self.a
		if self.b != None :
			s += " B%0.6f"%self.b
		return s
class goniometer(object):
	def __init__(self):
		self.x = 0
		self.y = 0
		self.z = 0
		self.a = 0
		self.b = 0
		self.start_time = 0
		self.MDI_COMPLETE = True
		self.abort_status = True
		self.jogging_cont = False
		self.ini_file  = sys.argv[2]
		
		print "Using ini file: %s"%self.ini_file			
		self.ini = linuxcnc.ini(self.ini_file)
		self.c = linuxcnc.command()
		self.err = linuxcnc.error_channel()	
		self.stat = linuxcnc.stat()
		self.h_find_pos = [(),()]
		self.init_glade()		
		postgui_halfile = self.ini.find("HAL", "POSTGUI_HALFILE")		
		print "LAR: Loading postgui hal file: %s"%postgui_halfile
		print (['halcmd', '-i', self.ini_file, "-f", postgui_halfile], subprocess.PIPE, subprocess.PIPE)
		p = subprocess.Popen(['halcmd', '-i', self.ini_file, "-f", postgui_halfile], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		
		out, err = p.communicate()
		print "LAR: Postgui load status out: %s err: %s"%(out,err)
		self.updating_inputs = False
		self.load_config()
		self.get_limits()
		gobject.timeout_add(100, self.error_watch)

	def message(self, s, type="Status") :
		if type.lower() == "status" :
			st = self.builder.get_object("statusbar1")
			context = st.get_context_id("gui")
			st.pop(context)
			st.push(context, s)
			

	def get_limits(self) :
		self.limits = {}
		s = os.popen("halcmd show pin ini.*limit*").read()
		for l in s.split("\n") :
			for i in range(5) :
				if "ini.%s.min_limit"%i in l :
					self.limits["min%s"%i] = float(l.split()[3])
					break
				if "ini.%s.max_limit"%i in l :
					self.limits["max%s"%i] = float(l.split()[3])
					break

	def save_config(self, *arg) :
		if self.updating_inputs : 
			return
		f = open(CFG,"w")
		for key, value in self.config.items("WIDGETS") :
			w = self.builder.get_object(key)
			if w != None :
				self.config.set("WIDGETS",key,w.get_text())
		self.config.write(f)
		f.close()

	def load_config(self) :
		self.config = ConfigParser.ConfigParser()
		self.config.read(CFG)			
		self.updating_inputs = True
		for key, value in self.config.items("WIDGETS") :
			w = self.builder.get_object(key)
			if w != None :
				w.set_text(value)
		self.updating_inputs = False
	
	def init_glade(self) :
		self.builder = gtk.Builder()
		self.builder.add_from_file(glade_file)
		self.builder.connect_signals(self)

		self.halcomp = hal.component("gui")
		panel = gladevcp.makepins.GladePanel( self.halcomp, glade_file, self.builder, None)		
		self.window = self.builder.get_object("window1")
		self.window.show()
		self.connect_signals()

	def get_increment(self) :
		for i in range(6):
			w = self.builder.get_object("inc%s"%i)
			if (w.get_active()) :
				try :
					return float(w.get_label())
				except :
					return -1	
				
	
	def check_coords(self,coord) :
		for i in range(5):
			if coord[i]>self.limits["max%s"%i] or coord[i]<self.limits["min%s"%i] :
				print "Move will exceed %s coordinate limits! %s (%s -- %s)"%("XYZAB"[i],coord[i],  self.limits["min%s"%i], self.limits["max%s"%i])
				return False
		return True
		
	def update_coord(self, coord_) :
		coord = self.kins(coord_)
		if not self.check_coords(coord):
			return
		self.x = coord_[0]
		self.y = coord_[1]
		self.z = coord_[2]
		self.a = coord_[3]
		self.b = coord_[4]
		self.goto_glob(coord)
		
	def goto_glob(self, coord) :
		X,Y,Z,A,B = coord
		print "G0 X%s Y%s Z%s A%s B%s"%(X,Y,Z,A,B)
		self.goto(None,X,Y,Z,A,B,G53="G53")
		
	def get_p(self,s) :
		try :
			return float(self.builder.get_object(s).get_text())
		except :
			print "Wrong string to float conversion ('%s')!"%self.builder.get_object(s).get_text()
			return 0.

	def kins(self, coord) :
		h = self.get_p("h")
		a = coord[3]*d2r
		b = coord[4]*d2r		
		x,y,z = coord[:3] 
		h1 = h*cos(a) + y*sin(b) 
		X = x*sin(-a)+h1*cos(a)+self.get_p("focus") + self.get_p("shift_x")
		Y = x*cos(a)+h1*sin(a) + self.get_p("shift_y")
		Z = y*cos(b) + self.get_p("shift_z")
		A = a*r2d
		B = b*r2d
		
		return X,Y,Z,A,B
	
	def move_btn(self,w, x,y,a,b) :
		inc = self.get_increment()
		
		x = self.x + x*inc
		y = self.y + y*inc
		z = self.z
		a = self.a + a*inc
		b = self.b + b*inc
		print("xyab>",x,y,a,b)
		self.update_coord((x,y,z,a,b))
	
	
	
	def scan_vert(self, w) :
		self.points = []
		amax = self.get_p("p0")
		step = self.get_p("p1")
		steps = self.get_p("p2")
		if steps == 0 :
			if step == 0 :	
				return 
			steps = ceil(amax/step)
		else :
			step = amax/steps	
			
		a = 0	
		self.points.append(P5(None,None,None,0,a))	
		for i in range(int(steps)) :
			a += step
			if a>amax : 
				a = amax
			self.points.append(P5(None,None,None,0,a))	
			self.points.append(P5(None,None,None,0,-a))	
		self.scan()
		
	def scan_hor(self, w) :
		self.points = []
		amax = self.get_p("p3")
		step = self.get_p("p4")
		steps = self.get_p("p5")
		if steps == 0 :
			if step == 0 :	
				return 
			steps = ceil(amax/step)
		else :
			step = amax/steps	
			
		a = 0	
		self.points.append(P5(None,None,None,a,0))	
		for i in range(int(steps)) :
			a += step
			if a>amax : 
				a = amax
			self.points.append(P5(None,None,None,a,0))	
			self.points.append(P5(None,None,None,-a,0))	
		self.scan()	
		
	def scan_sphere(self) :
		return
	def scan_square(self) :
		return
	def scan_star(self) :
		return
			
	def scan_cross(self) :
		return
			
	def sort_points(self) :
		points = [p.to_list() for p in self.points]
		points.sort()
		self.points = [P5(p) for p in points]			
		
	def scan(self) :
		self.sort_points()
		self.gcode = ""
		for p in self.points	:
			self.gcode += "G0 "+p.to_gcode() + "\n"					
		print self.gcode
		
			
	def connect_signals(self) :
		#self.window.connect("destroy",self.quit)
		self.window.connect("key-press-event", self.on_key_down)
		self.window.connect("delete-event", self.on_window_destroy)
		self.builder.get_object("global").connect("toggled", self.set_mode)
		self.builder.get_object("inc5").connect("toggled", self.set_inc)
		self.builder.get_object("start_cross").connect("clicked", self.scan_cross)
		self.builder.get_object("start_star").connect("clicked", self.scan_star)
		self.builder.get_object("start_sphere").connect("clicked", self.scan_sphere)
		self.builder.get_object("start_square").connect("clicked", self.scan_square)
		self.builder.get_object("start_vert").connect("clicked", self.scan_vert)
		self.builder.get_object("start_hor").connect("clicked", self.scan_hor)

		self.builder.get_object("jog_keyboard").connect("clicked", self.jog_keyboard)
		self.builder.get_object("jog_dialog").connect("key-press-event", self.jog_on_key_down)
		self.builder.get_object("jog_dialog").connect("key-release-event", self.jog_on_key_up)
		
		
	def set_inc(self, *arg) :
			w = self.builder.get_object("inc5")
			if (w.get_active()) :
					self.builder.get_object("jog_table").hide()
					self.builder.get_object("jog_table1").show()
			else :		
					self.builder.get_object("jog_table1").hide()
					self.builder.get_object("jog_table").show()


	def jog_keyboard(self, *arg):
		self.builder.get_object("jog_dialog").run()
		self.builder.get_object("jog_dialog").hide()
		self.jog_release()


	def jog_on_key_up(self, w, event):
		print "Up"
		key = event.keyval
		self.jog_release(force=True)
		return True
			
			
	def jog_on_key_down(self, w, event): 
		key = event.keyval
		print key
		s =   event.string
		if key == 65362 : 
			self.jog(None, 1,  1.)
		if key == 65363 : 
			self.jog(None, 0,  1.)
		if key == 65364 : 
			self.jog(None, 1, -1.)
		if key == 65361 : 
			self.jog(None, 0, -1.)
		if key == 65365 : 
			self.jog(None, 2,  1.)
		if key == 65366 : 
			self.jog(None, 2, -1.)
			
		if s in "[{хХ" and s!="" : 
			self.jog(None, 3, -1.)
		if s in "]}ъЪ" and s!="" : 
			self.jog(None, 3, 1.)
		if s in ",<бБ" and s!="" : 
			self.jog(None, 4, -1.)
		if s in ".>юЮ" and s!="" : 
			self.jog(None, 4, 1.)
		if key in [65293, 65307, 65421] :
			self.builder.get_object("jog_dialog").response(0)
			self.jog_release() 		
		return True
			

	def is_joint_mode(self) :
		self.stat.poll()
		return self.stat.motion_mode != 3

	
	def set_mode(self, *arg) :
		if  self.builder.get_object("global").get_active() :
			self.message("Локальные координаты")
			self.c.teleop_enable(0)
		else :	
			self.message("Глобальные координаты")
			self.c.teleop_enable(1)
			
	def run_thread(self, *arg) :
		if self.abort_status == True :
			self.finish()
			return False
			
		self.stat.poll()
		if self.MDI_COMPLETE == True :
			if self.prog_pos >= len(self.prog) :
				self.finish()
				return False

			self.update_coord(self.prog[self.prog_pos])
			self.prog_pos += 1
			
		self.builder.get_object("progress").set_fraction( self.prog_pos/len(self.prog) )
		
		print ".",
		sys.stdout.flush()
		return True

	def get_coord(self) :
		return self.x,self.y,self.z,self.a,self.b,

	def finish(self) :
		t =  time.time() - self.start_time
		
		print "Finished scanning. Done in %.0f:%.0f"%(t/60,t%60)
		self.builder.get_object("progress-dialog").hide()
 
		
	def start(self) :
		self.start_time = time.time()
		print "Start scanning..." 
		#self.abort_status = False
		#self.prog_pos = 0
		gobject.timeout_add(200, self.run_thread)		
		responce = self.builder.get_object("progress-dialog").run()
		self.abort()
	
		
	def error_watch(self, *arg) :
		e = self.err.poll()
		if e:
			if self.abort_status == False : 
				self.abort()
			print e[1]
			self.message(e[1])
			self.error_watch(self, *arg) # try to get the rest of quenue
		return True		
		
	def on_key_down(self, w, event): 
		key = event.keyval	
		if key == 65307 :	
			self.abort()
		print key
				

		
	def abort(self) :
		self.c.abort()
		self.jog_stop()
		self.stat.poll()
		
		self.abort_status = True
		self.finish()
		print "Aborting execution!"
	
	def goto(self,w,x=None,y=None,z=None,a=None,b=None, G53="") :
		c = ""+G53
		c += " X%s"%x if x!=None else ""
		c += " Y%s"%y if y!=None else ""
		c += " Z%s"%z if z!=None else ""
		c += " A%s"%a if a!=None else ""
		c += " B%s"%b if b!=None else ""
		if DEBUG > 10 : 
			print "G0" + c
		self.c.mode(linuxcnc.MODE_MDI)
		self.MDI_COMPLETE = False
		self.c.wait_complete()		
		self.c.mdi("G0" + c)
		self.c.wait_complete()		
		self.MDI_COMPLETE = True
		
	def on_window_destroy(self, widget, data=None):
		gtk.main_quit()
		

	def check_prog(self, prog) :
		for coord in prog : 
			coord_ = self.kins(coord_)
			if not self.check_coords(coord):
				print "Error at coords:", coord_
				return False
		return True

	def error_message(self, s) :
		w = self.builder.get_object("error-message")
		w.set_text(s)
		w.show()

	def run_prog(self, prog) :
		if not self.check_prog:
			self.error_message("С заданными параметрами программа выходит за пределы рабочей области оборудования")
			return
		else : 
			self.prog = prog
			self.start()	
			
			
	def scan_sphere(self, *arg) :
		a_min =		self.get_p("a_min")
		a_max =		self.get_p("a_max")
		a_step =	self.get_p("a_step")
		a_steps = 	int(self.get_p("a_steps"))
		if a_steps != 0 :
			a_step = (a_max - a_min)/a_steps
		elif a_step != 0 :
			a_steps = int(round((a_max - a_min)/a_step))
			
		b_min =		self.get_p("b_min")
		b_max =		self.get_p("b_max")
		b_step =	self.get_p("b_step")
		b_steps = 	int(self.get_p("b_steps"))
		if b_steps != 0 :
			b_step = (b_max - b_min)/b_steps
		elif b_step != 0 :
			b_steps = int(round((b_max - b_min)/b_step))
			
			
		prog = []

		for i in range(a_steps+1) :
			for j in range(b_steps+1) :
				prog.append((self.x,self.y,None,a_min+i*a_step, b_min+j*b_step))			
				
		self.run_prog(prog)
		
if __name__ == "__main__":
	app = goniometer()
	gtk.main() 

